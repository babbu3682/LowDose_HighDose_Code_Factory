{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install pretrainedmodels==0.7.4\n",
    "# !pip install efficientnet-pytorch==0.6.3\n",
    "# !pip install timm==0.3.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # CUDA 11.1\n",
    "# !pip install torch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# RMSE -> MAE Loss 꿀팁!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tue Jan  4 05:17:16 2022       \n",
      "+-----------------------------------------------------------------------------+\n",
      "| NVIDIA-SMI 470.86       Driver Version: 470.86       CUDA Version: 11.4     |\n",
      "|-------------------------------+----------------------+----------------------+\n",
      "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
      "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
      "|                               |                      |               MIG M. |\n",
      "|===============================+======================+======================|\n",
      "|   0  NVIDIA RTX A6000    Off  | 00000000:18:00.0 Off |                  Off |\n",
      "| 30%   26C    P8    22W / 300W |  35964MiB / 48685MiB |      0%      Default |\n",
      "|                               |                      |                  N/A |\n",
      "+-------------------------------+----------------------+----------------------+\n",
      "|   1  NVIDIA RTX A6000    Off  | 00000000:3B:00.0 Off |                  Off |\n",
      "| 30%   29C    P8    17W / 300W |      1MiB / 48685MiB |      0%      Default |\n",
      "|                               |                      |                  N/A |\n",
      "+-------------------------------+----------------------+----------------------+\n",
      "|   2  NVIDIA RTX A6000    Off  | 00000000:86:00.0 Off |                  Off |\n",
      "| 30%   34C    P2    68W / 300W |   1648MiB / 48685MiB |      0%      Default |\n",
      "|                               |                      |                  N/A |\n",
      "+-------------------------------+----------------------+----------------------+\n",
      "|   3  NVIDIA RTX A6000    Off  | 00000000:AF:00.0 Off |                  Off |\n",
      "| 30%   27C    P8    14W / 300W |      3MiB / 48685MiB |      0%      Default |\n",
      "|                               |                      |                  N/A |\n",
      "+-------------------------------+----------------------+----------------------+\n",
      "                                                                               \n",
      "+-----------------------------------------------------------------------------+\n",
      "| Processes:                                                                  |\n",
      "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
      "|        ID   ID                                                   Usage      |\n",
      "|=============================================================================|\n",
      "+-----------------------------------------------------------------------------+\n"
     ]
    }
   ],
   "source": [
    "!nvidia-smi\n",
    "\n",
    "import os\n",
    "os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\"\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"1\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/workspace/sunggu/4.Dose_img2img/scripts study\n"
     ]
    }
   ],
   "source": [
    "cd /workspace/sunggu/4.Dose_img2img/scripts study"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.8.0+cu111\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "print(torch.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU 갯수 =  64\n"
     ]
    }
   ],
   "source": [
    "import multiprocessing\n",
    "print(\"CPU 갯수 = \", multiprocessing.cpu_count())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# WU_CMT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "***********************************************\n",
      "***********************************************\n",
      "Dataset Name:  Sinogram_DCM\n",
      "---------- Model ----------\n",
      "Resume From:  \n",
      "Output To:  /workspace/sunggu/4.Dose_img2img/model/[Ours]WU_CMT\n",
      "Save   To:  /workspace/sunggu/4.Dose_img2img/Predictions/Train/png/[Ours]WU_CMT/low2high/\n",
      "---------- Optimizer ----------\n",
      "Learning Rate:  0.0001\n",
      "Batchsize:  64\n",
      "Loading dataset ....\n",
      "Train [Total]  number =  6899\n",
      "Valid [Total]  number =  14\n",
      "Creating criterion: Perceptual+L1 Loss\n",
      "Creating model: WU_CMT\n",
      "Number of Learnable Params: 358611396\n",
      "WU_CMT(\n",
      "  (input_Proj): InputProj(\n",
      "    (conv1): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "    (relu1): LeakyReLU(negative_slope=0.01)\n",
      "  )\n",
      "  (cmt_stage_1): Sequential(\n",
      "    (0): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_k): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_v): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_o): Linear(in_features=32, out_features=64, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "          )\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (1): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_k): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_v): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_o): Linear(in_features=32, out_features=64, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "          )\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (2): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_k): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_v): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_o): Linear(in_features=32, out_features=64, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "          )\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (conv_block_1): ConvBlock(\n",
      "    (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))\n",
      "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (relu): LeakyReLU(negative_slope=0.01)\n",
      "  )\n",
      "  (down_conv_1): DownsampleBlock(\n",
      "    (conv): Conv2d(64, 128, kernel_size=(2, 2), stride=(2, 2))\n",
      "  )\n",
      "  (cmt_stage_2): Sequential(\n",
      "    (0): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_k): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_v): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_o): Linear(in_features=64, out_features=128, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "          )\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (1): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_k): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_v): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_o): Linear(in_features=64, out_features=128, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "          )\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (2): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_k): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_v): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_o): Linear(in_features=64, out_features=128, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "          )\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (conv_block_2): ConvBlock(\n",
      "    (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))\n",
      "    (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (relu): LeakyReLU(negative_slope=0.01)\n",
      "  )\n",
      "  (down_conv_2): DownsampleBlock(\n",
      "    (conv): Conv2d(128, 256, kernel_size=(2, 2), stride=(2, 2))\n",
      "  )\n",
      "  (cmt_stage_3): Sequential(\n",
      "    (0): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (1): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (2): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (3): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (4): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (5): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (6): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (7): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (8): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (9): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (10): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (11): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (12): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (13): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (14): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (15): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (conv_block_3): ConvBlock(\n",
      "    (conv1): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "    (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (relu): LeakyReLU(negative_slope=0.01)\n",
      "  )\n",
      "  (down_conv_3): DownsampleBlock(\n",
      "    (conv): Conv2d(256, 512, kernel_size=(2, 2), stride=(2, 2))\n",
      "  )\n",
      "  (cmt_stage_4): Sequential(\n",
      "    (0): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_k): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_v): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_o): Linear(in_features=256, out_features=512, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)\n",
      "          )\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (1): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_k): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_v): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_o): Linear(in_features=256, out_features=512, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)\n",
      "          )\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (2): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_k): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_v): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_o): Linear(in_features=256, out_features=512, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)\n",
      "          )\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (conv_block_4): ConvBlock(\n",
      "    (conv1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "    (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (relu): LeakyReLU(negative_slope=0.01)\n",
      "  )\n",
      "  (down_conv_4): DownsampleBlock(\n",
      "    (conv): Conv2d(512, 1024, kernel_size=(2, 2), stride=(2, 2))\n",
      "  )\n",
      "  (cmt_stage_b): Sequential(\n",
      "    (0): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=1024, out_features=512, bias=True)\n",
      "        (fc_k): Linear(in_features=1024, out_features=512, bias=True)\n",
      "        (fc_v): Linear(in_features=1024, out_features=512, bias=True)\n",
      "        (fc_o): Linear(in_features=512, out_features=1024, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(1024, 4096, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096)\n",
      "          )\n",
      "          (1): BatchNorm2d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(4096, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (1): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=1024, out_features=512, bias=True)\n",
      "        (fc_k): Linear(in_features=1024, out_features=512, bias=True)\n",
      "        (fc_v): Linear(in_features=1024, out_features=512, bias=True)\n",
      "        (fc_o): Linear(in_features=512, out_features=1024, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(1024, 4096, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096)\n",
      "          )\n",
      "          (1): BatchNorm2d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(4096, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (2): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=1024, out_features=512, bias=True)\n",
      "        (fc_k): Linear(in_features=1024, out_features=512, bias=True)\n",
      "        (fc_v): Linear(in_features=1024, out_features=512, bias=True)\n",
      "        (fc_o): Linear(in_features=512, out_features=1024, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(1024, 4096, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096)\n",
      "          )\n",
      "          (1): BatchNorm2d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(4096, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (conv_block_b): ConvBlock(\n",
      "    (conv1): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1))\n",
      "    (conv2): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (relu): LeakyReLU(negative_slope=0.01)\n",
      "  )\n",
      "  (up_conv_5): UpsampleBlock(\n",
      "    (conv): Conv2d(2048, 8192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (pixel_shuffle): PixelShuffle(upscale_factor=2)\n",
      "    (prelu): PReLU(num_parameters=1)\n",
      "  )\n",
      "  (conv_block_5): ConvBlock(\n",
      "    (conv1): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "    (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (relu): LeakyReLU(negative_slope=0.01)\n",
      "  )\n",
      "  (cmt_stage_5): Sequential(\n",
      "    (0): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_k): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_v): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_o): Linear(in_features=256, out_features=512, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)\n",
      "          )\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (1): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_k): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_v): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_o): Linear(in_features=256, out_features=512, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)\n",
      "          )\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (2): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_k): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_v): Linear(in_features=512, out_features=256, bias=True)\n",
      "        (fc_o): Linear(in_features=256, out_features=512, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)\n",
      "          )\n",
      "          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (up_conv_6): UpsampleBlock(\n",
      "    (conv): Conv2d(512, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (pixel_shuffle): PixelShuffle(upscale_factor=2)\n",
      "    (prelu): PReLU(num_parameters=1)\n",
      "  )\n",
      "  (conv_block_6): ConvBlock(\n",
      "    (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))\n",
      "    (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (relu): LeakyReLU(negative_slope=0.01)\n",
      "  )\n",
      "  (cmt_stage_6): Sequential(\n",
      "    (0): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (1): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (2): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (3): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (4): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (5): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (6): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (7): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (8): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (9): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (10): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (11): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (12): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (13): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (14): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (15): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_k): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_v): Linear(in_features=256, out_features=128, bias=True)\n",
      "        (fc_o): Linear(in_features=128, out_features=256, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)\n",
      "          )\n",
      "          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (up_conv_7): UpsampleBlock(\n",
      "    (conv): Conv2d(256, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (pixel_shuffle): PixelShuffle(upscale_factor=2)\n",
      "    (prelu): PReLU(num_parameters=1)\n",
      "  )\n",
      "  (conv_block_7): ConvBlock(\n",
      "    (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))\n",
      "    (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (relu): LeakyReLU(negative_slope=0.01)\n",
      "  )\n",
      "  (cmt_stage_7): Sequential(\n",
      "    (0): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_k): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_v): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_o): Linear(in_features=64, out_features=128, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "          )\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (1): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_k): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_v): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_o): Linear(in_features=64, out_features=128, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "          )\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (2): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=128)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_k): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_v): Linear(in_features=128, out_features=64, bias=True)\n",
      "        (fc_o): Linear(in_features=64, out_features=128, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)\n",
      "          )\n",
      "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (up_conv_8): UpsampleBlock(\n",
      "    (conv): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (pixel_shuffle): PixelShuffle(upscale_factor=2)\n",
      "    (prelu): PReLU(num_parameters=1)\n",
      "  )\n",
      "  (conv_block_8): ConvBlock(\n",
      "    (conv1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))\n",
      "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
      "    (relu): LeakyReLU(negative_slope=0.01)\n",
      "  )\n",
      "  (cmt_stage_8): Sequential(\n",
      "    (0): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_k): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_v): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_o): Linear(in_features=32, out_features=64, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "          )\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (1): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_k): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_v): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_o): Linear(in_features=32, out_features=64, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "          )\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "    (2): CMTBlock(\n",
      "      (lpu): LPU(\n",
      "        (DWConv): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)\n",
      "        )\n",
      "      )\n",
      "      (lmhsa): LMHSA(\n",
      "        (dwconv_k): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (dwconv_v): DWCONV(\n",
      "          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(8, 8), padding=(1, 1), groups=64)\n",
      "        )\n",
      "        (fc_q): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_k): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_v): Linear(in_features=64, out_features=32, bias=True)\n",
      "        (fc_o): Linear(in_features=32, out_features=64, bias=True)\n",
      "      )\n",
      "      (irffn): IRFFN(\n",
      "        (conv1): Sequential(\n",
      "          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (dwconv): Sequential(\n",
      "          (0): DWCONV(\n",
      "            (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)\n",
      "          )\n",
      "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "          (2): GELU()\n",
      "        )\n",
      "        (conv2): Sequential(\n",
      "          (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))\n",
      "          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (output_Proj): OutputProj(\n",
      "    (conv1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
      "  )\n",
      "  (relu): LeakyReLU(negative_slope=0.01)\n",
      ")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Start training for 1000 epochs\n",
      "Traceback (most recent call last):\n",
      "  File \"train.py\", line 334, in <module>\n",
      "    main(args)\n",
      "  File \"train.py\", line 204, in main\n",
      "    train_stats = train_CNN_Based_Ours(model, criterion, data_loader_train, optimizer, device, epoch, args.patch_training, args.multiple_GT, args.criterion)\n",
      "  File \"/workspace/sunggu/4.Dose_img2img/scripts study/engine.py\", line 515, in train_CNN_Based_Ours\n",
      "    pred = model(input_n_20)\n",
      "  File \"/home/sunggu/.local/lib/python3.8/site-packages/torch/nn/modules/module.py\", line 889, in _call_impl\n",
      "    result = self.forward(*input, **kwargs)\n",
      "  File \"/home/sunggu/.local/lib/python3.8/site-packages/torch/nn/parallel/data_parallel.py\", line 165, in forward\n",
      "    return self.module(*inputs[0], **kwargs[0])\n",
      "  File \"/home/sunggu/.local/lib/python3.8/site-packages/torch/nn/modules/module.py\", line 889, in _call_impl\n",
      "    result = self.forward(*input, **kwargs)\n",
      "  File \"/workspace/sunggu/4.Dose_img2img/utils/Ours/models.py\", line 430, in forward\n",
      "    out1   = self.cmt_stage_1(input)\n",
      "  File \"/home/sunggu/.local/lib/python3.8/site-packages/torch/nn/modules/module.py\", line 889, in _call_impl\n",
      "    result = self.forward(*input, **kwargs)\n",
      "  File \"/home/sunggu/.local/lib/python3.8/site-packages/torch/nn/modules/container.py\", line 119, in forward\n",
      "    input = module(input)\n",
      "  File \"/home/sunggu/.local/lib/python3.8/site-packages/torch/nn/modules/module.py\", line 889, in _call_impl\n",
      "    result = self.forward(*input, **kwargs)\n",
      "  File \"/workspace/sunggu/4.Dose_img2img/utils/Ours/models.py\", line 320, in forward\n",
      "    x = self.lmhsa(x)\n",
      "  File \"/home/sunggu/.local/lib/python3.8/site-packages/torch/nn/modules/module.py\", line 889, in _call_impl\n",
      "    result = self.forward(*input, **kwargs)\n",
      "  File \"/workspace/sunggu/4.Dose_img2img/utils/Ours/cmt_module.py\", line 108, in forward\n",
      "    attn = attn + self.B\n",
      "RuntimeError: The size of tensor a (64) must match the size of tensor b (256) at non-singleton dimension 3\n"
     ]
    }
   ],
   "source": [
    "!python train.py \\\n",
    "--batch-size 64 \\\n",
    "--epochs 1000 \\\n",
    "--lr 1e-4 \\\n",
    "--lr_scheduler \"cosine_annealing_warm_restart\" \\\n",
    "--data-set 'Sinogram_DCM' \\\n",
    "--model-name 'WU_CMT' \\\n",
    "--criterion 'Perceptual+L1 Loss' \\\n",
    "--output_dir '/workspace/sunggu/4.Dose_img2img/model/[Ours]WU_CMT' \\\n",
    "--save_dir '/workspace/sunggu/4.Dose_img2img/Predictions/Train/png/[Ours]WU_CMT/low2high/' \\\n",
    "--validate-every 2 \\\n",
    "--num_workers 16 \\\n",
    "--criterion_mode 'not balance' \\\n",
    "--multiple_GT \"False\" \\\n",
    "--patch_training \"True\" \\\n",
    "--multi-gpu-mode 'DataParallel' \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Log check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import glob\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def read_log(path):\n",
    "    log_list = []\n",
    "    lines = open(path, 'r').read().splitlines() \n",
    "    for i in range(len(lines)):\n",
    "        exec('log_list.append('+lines[i] + ')')\n",
    "    return  log_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "log_list = read_log(path = '/workspace/sunggu/4.Dose_img2img/model/[Privious]ED_CNN/log.txt')\n",
    "\n",
    "train_lr   = [ log_list[i]['train_lr'] for i in range(len(log_list)) ]\n",
    "train_loss = [ log_list[i]['train_loss'] for i in range(len(log_list)) ]\n",
    "valid_loss = [ log_list[i]['valid_loss'] for i in range(len(log_list)) ]\n",
    "epoch      = [ log_list[i]['epoch'] for i in range(len(log_list)) ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(train_loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(valid_loss)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.argsort(train_loss)[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.argsort(valid_loss)[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "set(np.argsort(valid_loss)[:10]) & set(np.argsort(train_loss)[:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TEST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!python test.py \\\n",
    "--training-mode 'sinogram' \\\n",
    "--data-set 'TEST_Sinogram_DCM' \\\n",
    "--model-name 'ED_CNN' \\\n",
    "--save_dir '/workspace/sunggu/4.Dose_img2img/Predictions/Test/png/[Privious]ED_CNN/epoch_999/' \\\n",
    "--num_workers 4 \\\n",
    "--pin-mem \\\n",
    "--range-minus1-plus1 'False' \\\n",
    "--teacher_forcing \"False\" \\\n",
    "--resume '/workspace/sunggu/4.Dose_img2img/model/[Privious]ED_CNN/epoch_999_checkpoint.pth'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 978 epoch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "Original === \n",
    "PSNR avg: 54.4628 \n",
    "SSIM avg: 0.9956 \n",
    "RMSE avg: 7.9607\n",
    "\n",
    "\n",
    "Predictions === \n",
    "PSNR avg: 57.6190 \n",
    "SSIM avg: 0.9980 \n",
    "RMSE avg: 5.5423\n",
    "***********************************************"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "306.969px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
